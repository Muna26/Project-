generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String?
  name      String?
  picture   String?
  role      String   @default("user")
  enabled   Boolean  @default(true)
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Cart      Cart[]
  Order     Order[]
}

model Product {
  id             Int              @id @default(autoincrement())
  title          String
  description    String
  price          Float
  sold           Int              @default(0)
  quantity       Int
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  categoryId     Int?
  Images         Image[]
  category       Category?        @relation(fields: [categoryId], references: [id])
  ProductOnCart  ProductOnCart[]
  ProductOnOrder ProductOnOrder[]

  @@index([categoryId], map: "Product_categoryId_fkey")
}

model Order {
  id             Int              @id @default(autoincrement())
  cartTotal      Float
  orderStatus    String           @default("Not Process")
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  orderedById    Int
  User           User             @relation(fields: [orderedById], references: [id])
  ProductOnOrder ProductOnOrder[]

  @@index([orderedById], map: "Order_orderedById_fkey")
}

model ProductOnOrder {
  id        Int     @id @default(autoincrement())
  productId Int
  orderId   Int
  count     Int
  price     Float
  Order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  Product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([orderId], map: "ProductOnOrder_orderId_fkey")
  @@index([productId], map: "ProductOnOrder_productId_fkey")
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Cart {
  id            Int             @id @default(autoincrement())
  cartTotal     Float
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  orderedById   Int
  User          User            @relation(fields: [orderedById], references: [id])
  ProductOnCart ProductOnCart[]

  @@index([orderedById], map: "Cart_orderedById_fkey")
}

model ProductOnCart {
  id        Int     @id @default(autoincrement())
  cartId    Int
  productId Int
  count     Int
  price     Float
  Cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  Product   Product @relation(fields: [productId], references: [id])

  @@index([cartId], map: "ProductOnCart_cartId_fkey")
  @@index([productId], map: "ProductOnCart_productId_fkey")
}

model Image {
  id         Int      @id @default(autoincrement())
  asset_id   String
  public_id  String
  url        String
  secure_url String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  productId  Int
  Product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId], map: "Image_productId_fkey")
}
